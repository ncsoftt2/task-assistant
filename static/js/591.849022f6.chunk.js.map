{"version":3,"file":"static/js/591.849022f6.chunk.js","mappings":"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","sources":["features/Tasks/ui/hooks/useEditableTask.ts","features/Tasks/ui/EditableTask.tsx","features/Tasks/ui/Task.tsx","common/utils/utilsTaskStyles.ts","features/Tasks/ui/hooks/useTaskService.ts","features/Tasks/index.ts","features/Tasks/ui/CreateTask.tsx","features/TodoLists/ui/TodoList.tsx","features/TodoLists/ui/hooks/useTodoList.ts","features/TodoLists/ui/TodoLists.tsx"],"sourcesContent":["import {makeStyles, Theme} from \"mui-styles\";\r\nimport {TaskDomainType} from \"features/Tasks/model/slice/taskSlice\";\r\nimport {useFormik} from \"formik\";\r\nimport {taskActions} from \"features/Tasks/index\";\r\nimport * as yup from \"yup\";\r\nimport { useAppDispatch } from \"common/hooks/useAppDispatch\";\r\n\r\nexport const useTaskStyles = makeStyles<Theme>(() => ({\r\n    customList: {\r\n        '& .MuiList-root': {\r\n            padding:0\r\n        },\r\n    },\r\n    taskCheckBox: {\r\n        padding: 0,\r\n        zIndex: 0\r\n    },\r\n    taskTitle: {\r\n        margin:\"0 10px\",\r\n        fontSize:'16px',\r\n        wordBreak:'break-all',\r\n        width:'100%',\r\n        maxWidth:' 250px'\r\n    }\r\n}))\r\n\r\nexport const useEditableTask = (task:TaskDomainType,setOpen: (value: boolean) => void) => {\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: task.title,\r\n            description: task.description === null ? \"\" : task.description,\r\n            status: task.status,\r\n            priority: task.priority\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: async(values) => {\r\n            const action = await dispatch(taskActions.updateTaskTC({taskId:task.id,todoId:task.todoListId,model: values}))\r\n            if(!taskActions.updateTaskTC.rejected.match(action)) {\r\n                setOpen(false)\r\n            } else {\r\n                setTimeout(() => {\r\n                    dispatch(taskActions.changeTaskStatusAC({taskId:task.id,todoId:task.todoListId,taskStatus:\"idle\"}))\r\n                },2000)\r\n            }\r\n        }\r\n    })\r\n    return {formik}\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n    title: yup.string().min(3,'Минимум 3 символа').max(15,'Максимум 15 символов'),\r\n    description: yup.string().max(80,'Максимум 80 символов')\r\n});","import FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport {Box, MenuItem, Select} from \"@mui/material\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport * as React from \"react\";\r\nimport {makeStyles, Theme} from \"mui-styles\";\r\nimport {FC, memo} from \"react\";\r\nimport {taskPriority, taskStatus} from \"common/utils\";\r\nimport { TaskDomainType } from \"../model/slice/taskSlice\";\r\nimport { useEditableTask } from \"./hooks/useEditableTask\";\r\n\r\nconst useEditableTaskForm = makeStyles<Theme>(() => ({\r\n    customInput: {\r\n        '& .MuiInputBase-root': {\r\n            padding: 0\r\n        },\r\n        '& .MuiInputBase-input': {\r\n            padding: 5,\r\n        },\r\n        '& .MuiFormHelperText-root': {\r\n            lineHeight: 1,\r\n            margin: 0,\r\n            padding: 0,\r\n            position: 'absolute',\r\n            bottom: -15,\r\n            left: 0,\r\n            color: '#ff6d6d'\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '&:hover fieldset': {\r\n                borderColor: 'rgba(10,41,91,0.66)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'rgba(10,41,91,0.66)',\r\n                borderWidth: 1\r\n            },\r\n        }\r\n    }\r\n}))\r\n\r\ntype PropsType = {\r\n    task: TaskDomainType\r\n    setOpen: (value: boolean) => void\r\n}\r\n\r\nexport const EditableTask:FC<PropsType> = memo(({task,setOpen}) => {\r\n    const classes = useEditableTaskForm()\r\n    const {formik} = useEditableTask(task,setOpen)\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormGroup>\r\n                    <Box sx={{margin: '10px 0 20px'}}>\r\n                        <FormControl fullWidth>\r\n                            <Box>Название</Box>\r\n                            <TextField margin=\"normal\"\r\n                                       style={{margin: 0}}\r\n                                       className={classes.customInput}\r\n                                       helperText={formik.touched.title && formik.errors.title}\r\n                                       {...formik.getFieldProps('title')}\r\n                            />\r\n                        </FormControl>\r\n                    </Box>\r\n                    <Box sx={{margin: '0 0 20px'}}>\r\n                        <FormControl fullWidth>\r\n                            <Box>Описание</Box>\r\n                            <TextField margin=\"normal\"\r\n                                       style={{margin:0}}\r\n                                       className={classes.customInput}\r\n                                       helperText={formik.touched.description && formik.errors.description}\r\n                                       multiline\r\n                                       maxRows={3}\r\n                                       {...formik.getFieldProps('description')}\r\n                            />\r\n                        </FormControl>\r\n                    </Box>\r\n                    <Box sx={{margin: '0 0 10px'}}>\r\n                        <FormControl fullWidth>\r\n                            <Box>Статус</Box>\r\n                            <Select\r\n                                className={classes.customInput}\r\n                                {...formik.getFieldProps('status')}\r\n                            >\r\n                                {taskStatus.map(({status, label}) => {\r\n                                    return <MenuItem key={label} value={status} sx={{\r\n                                        '&:hover': {\r\n                                            backgroundColor: '#b9b7b7',\r\n                                            transition: 'background-color 0.3s ease'\r\n                                        }\r\n                                    }}>{label}</MenuItem>\r\n                                })}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                    <Box sx={{margin: '0 0 10px'}}>\r\n                        <FormControl fullWidth>\r\n                            <Box>Приоритет</Box>\r\n                            <Select\r\n                                sx={{maxWidth: '100%'}}\r\n                                className={classes.customInput}\r\n                                {...formik.getFieldProps('priority')}\r\n                            >\r\n                                {taskPriority.map(({priority, label}) => {\r\n                                    return <MenuItem key={label} value={priority} sx={{\r\n                                        '&:hover': {\r\n                                            backgroundColor: '#b9b7b7',\r\n                                            transition: 'background-color 0.3s ease'\r\n                                        }\r\n                                    }}>{label}</MenuItem>\r\n                                })}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                    <Button type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                            disabled={task.taskStatus === 'loading'}\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            {task.taskStatus === 'failed' && (\r\n                <Box sx={{textAlign:'center',mt:'5px',color:'#d50000'}}>try later...</Box>\r\n            )}\r\n        </form>\r\n    )\r\n})","import React, {FC, memo, useState} from \"react\";\r\nimport {Box, Button, Checkbox, ListItem, Menu, MenuItem, Typography} from \"@mui/material\";\r\nimport {TaskStatus} from \"common/enums\";\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport {EditableTask} from \"features/Tasks/ui/EditableTask\";\r\nimport { TaskDomainType } from \"../model/slice/taskSlice\";\r\nimport {utilsTaskStyles} from \"common/utils/utilsTaskStyles\";\r\nimport { useTaskStyles } from \"./hooks/useEditableTask\";\r\nimport { useTaskService } from \"./hooks/useTaskService\";\r\nimport { UniversalModal } from \"common/components\";\r\ntype PropsType = {\r\n    task: TaskDomainType\r\n    todoId:string\r\n}\r\n\r\nexport const Task:FC<PropsType> = memo(({task,todoId}) => {\r\n    const [openEditTask, setOpenEditTask] = useState(false);\r\n    const {status,priority,title} = task\r\n    const classes = useTaskStyles()\r\n    const {menuItemStyle,listItemStyle,taskPriorityTriangleColor} = utilsTaskStyles(status,priority)\r\n    const {\r\n        open,\r\n        handleOpenEditModalTask,\r\n        handleClose,\r\n        handleClick,\r\n        anchorEl,\r\n        handleChangeTaskStatus,\r\n        handleDeleteTask,\r\n        taskDeadline\r\n    } = useTaskService(todoId,task,setOpenEditTask)\r\n    const triangleFigure = {\r\n        position:'absolute',\r\n        top:-2,\r\n        right:-10,\r\n        width: 0,\r\n        height: 0,\r\n        borderStyle: 'solid',\r\n        borderWidth: '0 15px 15px 15px',\r\n        borderColor: `transparent transparent ${taskPriorityTriangleColor} transparent`,\r\n        transform: 'rotate(45deg)'\r\n    }\r\n    return (\r\n        <ListItem sx={listItemStyle}>\r\n            <Box sx={triangleFigure}></Box>\r\n            <Checkbox\r\n                checked={status === TaskStatus.Completed}\r\n                onChange={handleChangeTaskStatus}\r\n                color={'default'}\r\n                size={'small'}\r\n                className={classes.taskCheckBox}\r\n            />\r\n            <Typography variant={'h3'} className={classes.taskTitle}>{title}</Typography>\r\n            <Box>deadline <b>{taskDeadline}</b></Box>\r\n            <Box>\r\n                <Button sx={{color:'black',padding:0,minWidth:\"40px\",position:'relative','&:hover': {\r\n                        transform: 'rotate(180deg)',\r\n                        transition: 'transform 0.5s ease',\r\n                    }}}\r\n                        onClick={handleClick}>\r\n                    <SettingsIcon/>\r\n                </Button>\r\n                <Menu anchorEl={anchorEl}\r\n                      open={open}\r\n                      className={classes.customList}\r\n                      onClose={handleClose}\r\n                >\r\n                    <MenuItem onClick={handleOpenEditModalTask} sx={menuItemStyle}>Изменить</MenuItem>\r\n                    <MenuItem onClick={handleDeleteTask} sx={menuItemStyle}>Удалить</MenuItem>\r\n                </Menu>\r\n            </Box>\r\n            {\r\n                openEditTask && (\r\n                    <UniversalModal open={openEditTask} setOpen={setOpenEditTask}>\r\n                        <EditableTask task={task} setOpen={setOpenEditTask}/>\r\n                    </UniversalModal>\r\n                )\r\n            }\r\n        </ListItem>\r\n    )\r\n})\r\n","import {TaskPriority, TaskStatus} from \"common/enums\";\r\n\r\nexport const utilsTaskStyles = (status:TaskStatus, priority: TaskPriority) => {\r\n    const listItemBorderColor = status === TaskStatus.Completed\r\n        ? \"#86ff7b\"\r\n        : status === TaskStatus.InProgress\r\n            ? \"#fff487\"\r\n            : status === TaskStatus.Draft\r\n                ? \"#e1e1e1\" : '#63cfff'\r\n    const taskPriorityTriangleColor = priority === TaskPriority.High\r\n        ? \"#ffd630\"\r\n        : priority === TaskPriority.Middle\r\n            ? \"#ffa805\"\r\n            : priority === TaskPriority.Urgently\r\n                ? \"#fd2a2a\"\r\n                : priority === TaskPriority.Later\r\n                    ? \"#b0b0b0\"\r\n                    : \"#303aff\"\r\n    const listItemStyle = {\r\n        position:'relative',\r\n        display:'flex',\r\n        alignItems:'center',\r\n        justifyContent:'space-between',\r\n        background: listItemBorderColor,\r\n        padding:'8px',\r\n        margin: '5px 0',\r\n    }\r\n    const menuItemStyle = {\r\n        fontSize:'14px', '&:hover': {\r\n            backgroundColor: '#e0e0e0',\r\n            transition: 'background-color 0.3s ease'\r\n        }}\r\n    return {\r\n        listItemBorderColor,\r\n        listItemStyle,\r\n        menuItemStyle,\r\n        taskPriorityTriangleColor\r\n    }\r\n}","import {TaskStatus} from \"common/enums\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport {taskActions} from \"features/Tasks/index\";\r\nimport {TaskDomainType} from \"features/Tasks/model/slice/taskSlice\";\r\n\r\nexport const useTaskService = (todoId:string,task:TaskDomainType,setOpenEditTask?: (value: boolean) => void) => {\r\n    const {updateTaskTC,deleteTaskTC} = useActions(taskActions)\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const date = new Date(task.deadline)\r\n    const taskDeadlineDate = date.getDate().toString().padStart(2, '0')\r\n    const taskDeadlineMonth = (date.getMonth() + 1).toString().padStart(2, '0')\r\n    const taskDeadlineYear = date.getFullYear()\r\n    const taskDeadline = `${taskDeadlineDate}.${taskDeadlineMonth}.${taskDeadlineYear}`\r\n\r\n    const open = Boolean(anchorEl)\r\n    const handleClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    },[])\r\n    const handleDeleteTask = useCallback(() => {\r\n        deleteTaskTC({todoId, taskId: task.id})\r\n        setAnchorEl(null)\r\n    },[todoId,task.id])\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n    const handleOpenEditModalTask = useCallback(() => {\r\n        setOpenEditTask && setOpenEditTask(true)\r\n        setAnchorEl(null)\r\n    },[])\r\n    const handleChangeTaskStatus = useCallback((e:ChangeEvent<HTMLInputElement>) => {\r\n        const checkedValue = e.currentTarget.checked\r\n        const status = checkedValue ? TaskStatus.Completed : TaskStatus.New\r\n        updateTaskTC({todoId,taskId:task.id,model: {status}})\r\n    },[todoId,task.id])\r\n    return {\r\n        handleClose,\r\n        open,\r\n        handleClick,\r\n        handleOpenEditModalTask,\r\n        anchorEl,\r\n        handleChangeTaskStatus,\r\n        handleDeleteTask,\r\n        taskDeadline\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { EditableTask } from \"./ui/EditableTask\";\r\nimport { Task } from \"./ui/Task\";\r\nimport * as tasksSelectors from \"./model/selectors/taskSelectors\";\r\nimport {tasksActionsCreators, tasksThunks} from \"./model/slice/taskSlice\";\r\n\r\nconst taskActions = {...tasksThunks,...tasksActionsCreators}\r\nexport {\r\n    tasksSelectors,\r\n    EditableTask,\r\n    Task,\r\n    taskActions\r\n}","import {FC} from \"react\";\r\nimport {Box, Button, FormControlLabel, FormLabel, Grid, Radio, RadioGroup} from \"@mui/material\"\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { isRejectedWithValue } from \"@reduxjs/toolkit\";\r\nimport { taskPriority } from \"common/utils\";\r\nimport {useAppDispatch} from \"common/hooks/useAppDispatch\";\r\nimport { createTaskTC } from \"../model/thunk/createTask\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n    title: Yup.string().required('Обязательное свойство').min(3,'Минимум 3 символа').max(20,'Максимум 20 символов'),\r\n    description: Yup.string().required('Обязательное свойство').min(3,'Минимум 3 символа').max(80,'Максимум 80 символов')\r\n})\r\n\r\nexport const CreateTaskForm:FC<PropsType> = ({id}) => {\r\n    const dispatch = useAppDispatch()\r\n    const gridPadding = {\r\n        padding:'10px'\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: '',\r\n            description: '',\r\n            priority: 1 || 2 || 3 || 4 || 5,\r\n            deadline: new Date()\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: async (values, { resetForm,setSubmitting }) => {\r\n            setSubmitting(true)\r\n            const action = await dispatch(createTaskTC({ id, payload: values }));\r\n            if(!isRejectedWithValue(action)) {\r\n                resetForm()\r\n            }\r\n            setSubmitting(false)\r\n        },\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormGroup>\r\n                    <Grid container>\r\n                        <Grid item xs={12} md={7} style={gridPadding}>\r\n                            <FormLabel>Название:</FormLabel>\r\n                            <Box>\r\n                                <FormControl fullWidth>\r\n                                    <TextField margin=\"normal\"\r\n                                               style={{margin: 0}}\r\n                                               helperText={formik.touched.title && formik.errors.title}\r\n                                               {...formik.getFieldProps('title')}\r\n                                    />\r\n                                </FormControl>\r\n                            </Box>\r\n                            <FormLabel>Описание:</FormLabel>\r\n                            <Box>\r\n                                <FormControl fullWidth>\r\n                                    <TextField margin=\"normal\"\r\n                                               style={{margin: 0}}\r\n                                               multiline\r\n                                               maxRows={3}\r\n                                               helperText={formik.touched.description && formik.errors.description}\r\n                                               {...formik.getFieldProps('description')}\r\n                                    />\r\n                                </FormControl>\r\n                            </Box>\r\n                            <FormLabel>deadline:</FormLabel>\r\n                            <Box>\r\n                                <FormControl fullWidth>\r\n                                    <TextField\r\n                                        id=\"date\"\r\n                                        type=\"date\"\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        {...formik.getFieldProps('deadline')}\r\n                                    />\r\n                                </FormControl>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={5} style={gridPadding}>\r\n                            <FormLabel>Приоритет:</FormLabel>\r\n                            <RadioGroup defaultValue={taskPriority[0].priority} {...formik.getFieldProps('priority')}>\r\n                                {taskPriority.map(({priority, label}) => {\r\n                                    return <FormControlLabel key={label}\r\n                                                             value={priority}\r\n                                                             control={<Radio/>}\r\n                                                             label={label}\r\n                                                             name={'priority'}\r\n                                    />\r\n                                })}\r\n                            </RadioGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button type={'submit'}\r\n                            disabled={formik.isSubmitting}\r\n                            variant={'contained'}\r\n                            color={'primary'}>create</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n","import {FC, memo, useState} from \"react\";\r\nimport {Box, Button, ButtonGroup,Typography, CircularProgress, List} from \"@mui/material\";\r\nimport { Task } from \"../../Tasks\";\r\nimport BoltIcon from '@mui/icons-material/Bolt';\r\nimport FiberNewIcon from '@mui/icons-material/FiberNew';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport {CreateTaskForm} from \"features/Tasks/ui/CreateTask\";\r\nimport { TodoListReducerType } from \"../model/slice/todoSlice\";\r\nimport { useTodoList } from \"./hooks/useTodoList\";\r\nimport {UniversalButton, UniversalModal } from \"common/components\";\r\n\r\ntype PropsType = {\r\n    todoList: TodoListReducerType\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList:FC<PropsType> = memo(({demo,todoList: {title,filter,id,entityStatus,addedDate}}) => {\r\n    const disabled = entityStatus === 'loading'\r\n    const {\r\n        handleDeleteTodoList,\r\n        handleChangeFilter,\r\n        handleChangePriority,\r\n        tasks,\r\n        filteredTasks,\r\n        priority,\r\n        todoTitleStyle,\r\n        todoAddedDate\r\n    } = useTodoList(id,filter,demo = false,addedDate)\r\n    const [openCreateTask, setOpenCreateTask] = useState(false)\r\n    const tasksRender = filteredTasks.map(task => {\r\n        return <Task key={task.id}\r\n                     todoId={id}\r\n                     task={task}\r\n        />\r\n    })\r\n    return (\r\n        <>\r\n            <Box sx={{textAlign:'right'}}>\r\n                {\r\n                    openCreateTask && (\r\n                        <UniversalModal open={openCreateTask} setOpen={setOpenCreateTask}>\r\n                            <CreateTaskForm id={id}/>\r\n                        </UniversalModal>\r\n                    )\r\n                }\r\n                <Button sx={{padding:0,minWidth:'40px', '&:hover': {\r\n                        transform: 'rotate(90deg)',\r\n                        transition: 'transform 0.5s ease',\r\n                    }}} onClick={handleDeleteTodoList}>\r\n                    <ClearIcon/>\r\n                </Button>\r\n            </Box>\r\n            <Box>\r\n                <Typography variant='h2' fontSize={18} sx={todoTitleStyle}>{title}</Typography>\r\n            </Box>\r\n            <Box sx={{display:'flex',justifyContent:'center'}} onClick={() => setOpenCreateTask(true)}>\r\n                <Button>Create new task</Button>\r\n            </Box>\r\n            <Box>created: {todoAddedDate}</Box>\r\n            {\r\n                !disabled\r\n                    ? <List sx={{gap: 2}}>{tasksRender}</List>\r\n                    : <Box sx={{margin:'10px 0',display:'flex',justifyContent:'center'}}>\r\n                        <CircularProgress color=\"primary\" />\r\n                    </Box>\r\n            }\r\n            {tasks.length > 0 && (\r\n                    <Box sx={{display:'flex',justifyContent:'space-around',alignItems:'center'}}>\r\n                        {filteredTasks.length > 1 &&\r\n                            <Button onClick={() => handleChangePriority(1)} sx={{padding:0,minWidth:'20px'}}>\r\n                                {priority === 1\r\n                                    ? <BoltIcon/>\r\n                                    : <FiberNewIcon/>\r\n                                }\r\n                            </Button>\r\n                        }\r\n                        <ButtonGroup variant=\"contained\" disabled={disabled} >\r\n                            <UniversalButton callback={() => handleChangeFilter('all')}\r\n                                             name=\"All\"\r\n                                             variant={filter === 'all' ? 'contained' : \"outlined\"}\r\n                                             color={filter === 'all' ? 'primary' : 'secondary'}/>\r\n                            <UniversalButton callback={() => handleChangeFilter('active')}\r\n                                             name=\"Active\"\r\n                                             variant={filter === 'active' ? 'contained' : \"outlined\"}\r\n                                             color={filter === 'active' ? 'primary' : 'secondary'}/>\r\n                            <UniversalButton callback={() => handleChangeFilter('completed')}\r\n                                             name=\"Completed\"\r\n                                             variant={filter === 'completed' ? 'contained' : \"outlined\"}\r\n                                             color={filter === 'completed' ? 'primary' : 'secondary'}/>\r\n                        </ButtonGroup>\r\n                    </Box>\r\n\r\n            )}\r\n        </>\r\n    )\r\n})\r\n\r\n","import {useCallback, useEffect, useState} from \"react\";\r\nimport {TaskPriority, TaskStatus} from \"common/enums\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport {taskActions} from \"../../../Tasks\";\r\nimport {todoListActions} from \"../../index\";\r\nimport {TaskDomainType} from \"features/Tasks/model/slice/taskSlice\";\r\nimport { TodoFilterType } from \"features/TodoLists/model/slice/todoSlice\";\r\nimport { useAppSelector } from 'common/hooks/useAppSelector';\r\nexport const useTodoList = (id: string,filter:TodoFilterType,demo: boolean,addedDate: Date) => {\r\n    const tasks = useAppSelector(state => state.tasks[id])\r\n    const date = new Date(addedDate)\r\n    const todoDate = date.getDate().toString().padStart(2, '0')\r\n    const todoMonth = (date.getMonth() + 1).toString().padStart(2, '0')\r\n    const todoYear = date.getFullYear()\r\n    const todoAddedDate = `${todoDate}.${todoMonth}.${todoYear}`\r\n    const todoTitleStyle = {\r\n        display:'flex',\r\n        justifyContent:'center',\r\n        maxWidth:'200px',\r\n        fontWeight: 400,\r\n        margin:'0px auto',\r\n        wordBreak:'break-all',\r\n    }\r\n    const [priority,setPriority] = useState<TaskPriority>(TaskPriority.Low)\r\n    const {fetchTasksTC,sortTasksAC} = useActions(taskActions)\r\n    const {deleteTodoTC,changeTodoFilterAC} = useActions(todoListActions)\r\n    const handleDeleteTodoList = () => deleteTodoTC(id)\r\n    const handleChangeFilter = useCallback((filter:TodoFilterType) => changeTodoFilterAC({todoId:id,filter:filter}),[])\r\n    const handleChangePriority = (e: 1 | 5) => {\r\n        setPriority(prevState => prevState === 1 ? 5 : 1)\r\n        sortTasksAC({tasks:tasks, priority:priority, todoId:id})\r\n    }\r\n    const filterTasks = (tasks:TaskDomainType[],filter:TodoFilterType):TaskDomainType[] => {\r\n        switch (filter) {\r\n            case \"active\":\r\n                return tasks.filter(({status}) => status !== TaskStatus.Completed)\r\n            case \"completed\":\r\n                return tasks.filter(({status}) => status === TaskStatus.Completed)\r\n            default: return tasks\r\n        }\r\n    }\r\n    const filteredTasks = filterTasks(tasks,filter)\r\n    useEffect(() => {\r\n        if(!demo) fetchTasksTC(id)\r\n    },[])\r\n    return {\r\n        handleDeleteTodoList,\r\n        handleChangeFilter,\r\n        handleChangePriority,\r\n        filteredTasks,\r\n        tasks,\r\n        priority,\r\n        todoTitleStyle,\r\n        todoAddedDate\r\n    }\r\n}","import {Box, Container, Grid, Paper} from \"@mui/material\"\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport * as React from \"react\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport {todoListActions, todoListSelectors} from \"features/TodoLists/index\";\r\nimport { TodoList } from \"./TodoList\";\r\nimport { AddItemForm, SkeletonTodoLists } from \"common/components\";\r\nimport { useAppDispatch } from \"common/hooks/useAppDispatch\";\r\nimport { useAppSelector } from 'common/hooks/useAppSelector';\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst TodoLists:React.FC<PropsType> = ({demo = false}) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const todoList = useAppSelector(todoListSelectors.fetchTodoSelector)\r\n    const {createTodoTC} = useActions(todoListActions)\r\n    const dispatch = useAppDispatch()\r\n    const addNewTodo = useCallback((title:string) => createTodoTC(title),[])\r\n    const elements = todoList.map(todo => {\r\n        return (\r\n            <Grid item sx={{p:1}} md={6} lg={4} sm={6} xs={12} key={todo.id}>\r\n                <Paper elevation={5} sx={{p: 1,margin:\"0 auto\"}}>\r\n                    <TodoList\r\n                        key={todo.id}\r\n                        todoList={todo}\r\n                        demo={demo}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    useEffect(() => {\r\n        if(!demo) {\r\n            setLoading(true)\r\n            dispatch(todoListActions.fetchTodoTC())\r\n                .finally(() => setLoading(false))\r\n        }\r\n    }, [])\r\n    return (\r\n        <>\r\n            <Container maxWidth=\"lg\" disableGutters>\r\n                <Box sx={{display:'flex',justifyContent:'center',margin:'15px 0 30px'}}>\r\n                    <AddItemForm maxLengthTitle={20} callback={addNewTodo} />\r\n                </Box>\r\n                <Grid container sx={{margin:'10px 0'}}>\r\n                    {\r\n                        loading\r\n                            ? <SkeletonTodoLists/>\r\n                            : elements\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default TodoLists\r\n"],"names":["useTaskStyles","makeStyles","customList","padding","taskCheckBox","zIndex","taskTitle","margin","fontSize","wordBreak","width","maxWidth","validationSchema","yup","title","min","max","description","useEditableTaskForm","customInput","lineHeight","position","bottom","left","color","borderColor","borderWidth","EditableTask","memo","_ref","task","setOpen","classes","_useEditableTask","dispatch","useAppDispatch","formik","useFormik","initialValues","status","priority","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","action","wrap","_context","prev","next","taskActions","updateTaskTC","taskId","id","todoId","todoListId","model","sent","rejected","match","setTimeout","changeTaskStatusAC","taskStatus","stop","_x","apply","arguments","useEditableTask","_jsxs","handleSubmit","children","_jsx","FormControl","FormGroup","Box","sx","fullWidth","TextField","_objectSpread","style","className","helperText","touched","errors","getFieldProps","multiline","maxRows","Select","map","_ref2","label","MenuItem","value","backgroundColor","transition","taskPriority","_ref3","Button","type","variant","disabled","textAlign","mt","Task","_useState","useState","_useState2","_slicedToArray","openEditTask","setOpenEditTask","_utilsTaskStyles","listItemBorderColor","TaskStatus","Completed","InProgress","Draft","listItemStyle","display","alignItems","justifyContent","background","menuItemStyle","taskPriorityTriangleColor","TaskPriority","High","Middle","Urgently","Later","utilsTaskStyles","_useTaskService","_useActions","useActions","deleteTaskTC","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","date","Date","deadline","taskDeadlineDate","getDate","toString","padStart","taskDeadlineMonth","getMonth","taskDeadlineYear","getFullYear","taskDeadline","concat","open","Boolean","handleClick","useCallback","event","currentTarget","handleDeleteTask","handleClose","handleOpenEditModalTask","handleChangeTaskStatus","e","checked","New","useTaskService","triangleFigure","top","right","height","borderStyle","transform","ListItem","Checkbox","onChange","size","Typography","minWidth","onClick","SettingsIcon","Menu","onClose","UniversalModal","tasksThunks","tasksActionsCreators","Yup","required","CreateTaskForm","gridPadding","resetForm","setSubmitting","createTaskTC","payload","isRejectedWithValue","_x2","Grid","container","item","xs","md","FormLabel","InputLabelProps","shrink","RadioGroup","defaultValue","FormControlLabel","control","Radio","name","isSubmitting","TodoList","demo","_ref$todoList","todoList","filter","entityStatus","addedDate","_useTodoList","tasks","useAppSelector","state","todoDate","todoMonth","todoYear","todoAddedDate","Low","setPriority","fetchTasksTC","sortTasksAC","_useActions2","todoListActions","deleteTodoTC","changeTodoFilterAC","handleChangeFilter","filteredTasks","filterTasks","useEffect","handleDeleteTodoList","handleChangePriority","prevState","todoTitleStyle","fontWeight","useTodoList","openCreateTask","setOpenCreateTask","tasksRender","_Fragment","ClearIcon","CircularProgress","List","gap","length","BoltIcon","FiberNewIcon","ButtonGroup","UniversalButton","callback","_ref$demo","loading","setLoading","todoListSelectors","createTodoTC","addNewTodo","elements","todo","p","lg","sm","Paper","elevation","fetchTodoTC","finally","Container","disableGutters","AddItemForm","maxLengthTitle","SkeletonTodoLists"],"sourceRoot":""}