{"version":3,"file":"static/js/756.53d23034.chunk.js","mappings":"4VAyDA,EA1Cc,WACV,IAAMA,GAASC,EAAAA,EAAAA,GAAeC,EAAAA,GAAAA,GAC9BC,ECNoB,WACpB,IAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GAYP,MAXgC,CAAC,CAYrC,EACAC,SAAS,WAAD,IAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAMN,EAAOO,GAA8C,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAChC,OAAjCR,EAAcS,eAAc,GAAKH,EAAAE,KAAA,EACZxB,EAAS0B,EAAAA,GAAYC,QAAQlB,IAAQ,OAApDQ,EAAMK,EAAAM,KACTF,EAAAA,GAAYC,QAAQE,SAASC,MAAMb,IACjB,QAAjBC,EAAGD,EAAOc,eAAO,IAAAb,GAAc,QAAdC,EAAdD,EAAgBc,oBAAY,IAAAb,GAA5BA,EAA8Bc,SACvBb,EAAeH,EAAOc,QAAQC,aAAa,GACjDhB,EAAckB,cAAcd,EAAae,MAAMf,EAAagB,QAGpEpB,EAAcS,eAAc,GAAM,wBAAAH,EAAAe,OAAA,GAAAtB,EAAA,KACrC,gBAAAuB,EAAAC,GAAA,OAAA5B,EAAA6B,MAAA,KAAAC,UAAA,EAVQ,KAYb,MAAO,CAACvC,OAAAA,EACZ,CD7BqBwC,GAAVxC,EAAMH,EAANG,OACP,OAAGN,GAAe+C,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIC,EAAAA,GAAUC,QACnCJ,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,WAAS,EAACC,eAAgB,SAASC,UAC5CR,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACI,MAAI,EAACF,eAAgB,SAASC,UAChCR,EAAAA,EAAAA,KAAA,QAAMjC,SAAUR,EAAOmD,aAAaF,UAChCG,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAJ,SAAA,EACRG,EAAAA,EAAAA,MAACE,EAAAA,EAAS,CAAAL,SAAA,EACNR,EAAAA,EAAAA,KAAA,KAAAQ,SAAG,8BACHR,EAAAA,EAAAA,KAAA,KAAAQ,SAAG,yBAEPG,EAAAA,EAAAA,MAACG,EAAAA,EAAS,CAAAN,SAAA,EACNR,EAAAA,EAAAA,KAACe,EAAAA,GAASC,EAAAA,EAAAA,GAAA,CAACC,MAAM,QACNC,OAAO,SACPC,WAAY5D,EAAO6D,QAAQ1D,OAASH,EAAO8D,OAAO3D,OAC9CH,EAAO+D,cAAc,YAEpCtB,EAAAA,EAAAA,KAACe,EAAAA,GAASC,EAAAA,EAAAA,GAAA,CAACO,KAAK,WACLN,MAAM,WACNC,OAAO,SACPC,WAAY5D,EAAO6D,QAAQzD,UAAYJ,EAAO8D,OAAO1D,UACjDJ,EAAO+D,cAAc,eAEpCtB,EAAAA,EAAAA,KAACwB,EAAAA,EAAgB,CAACP,MAAO,cAAeQ,SAASzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACtDC,KAAK,aACLC,QAASrE,EAAOO,OAAOF,WACvBiE,SAAUtE,EAAOuE,kBAErB9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACHC,SAAUzE,EAAO0E,aACjBV,KAAM,SACNW,QAAS,YACTC,MAAO,UAAU3B,SAAC,qBAQ9C,C","sources":["features/auth/ui/Login.tsx","features/auth/ui/hooks/useLogin.ts"],"sourcesContent":["import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {RoutePath} from \"app/providers/router/ui/AppRouter\";\r\nimport { useAppSelector } from 'common/hooks/useAppSelector';\r\nimport { useLogin } from './hooks/useLogin';\r\nimport {authSelectors} from \"features/auth/index\";\r\n\r\nconst Login = () => {\r\n    const isAuth = useAppSelector(authSelectors.isAuthSelector)\r\n    const {formik} = useLogin()\r\n    if(isAuth) return <Navigate to={RoutePath.main}/>\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>Email: zrm1306@gmail.com</p>\r\n                        <p>Password: 111111</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   helperText={formik.touched.email && formik.errors.email}\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   helperText={formik.touched.password && formik.errors.password}\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            name=\"rememberMe\"\r\n                            checked={formik.values.rememberMe}\r\n                            onChange={formik.handleChange}\r\n                        />}/>\r\n                        <Button\r\n                            disabled={formik.isSubmitting}\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\nexport default Login","import {FormikHelpers, useFormik} from \"formik\";\r\nimport { LoginPayloadType } from \"features/auth/api/authApi.types\";\r\nimport {authActions} from \"features/auth/index\";\r\nimport {useAppDispatch} from \"common/hooks/useAppDispatch\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const useLogin = () => {\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            // if (!values.email) {\r\n            //     errors.email = 'Обязательное свойство'\r\n            // } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            //     errors.email = 'Неправильный email'\r\n            // }\r\n            // if(!values.password) {\r\n            //     errors.password = 'Обязательное свойство'\r\n            // } else if (values.password.trim().length < 4) {\r\n            //     errors.password = 'Минимум 4 символа'\r\n            // }\r\n            return errors\r\n        },\r\n        onSubmit: async(values,formikHelpers: FormikHelpers<LoginPayloadType>) => {\r\n            formikHelpers.setSubmitting(true)\r\n            const action = await dispatch(authActions.loginTC(values))\r\n            if(authActions.loginTC.rejected.match(action)) {\r\n                if(action.payload?.fieldsErrors?.length) {\r\n                    const errorMessage = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(errorMessage.field,errorMessage.error)\r\n                }\r\n            }\r\n            formikHelpers.setSubmitting(false)\r\n        }\r\n    })\r\n    return {formik}\r\n}"],"names":["isAuth","useAppSelector","authSelectors","_useLogin","dispatch","useAppDispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formikHelpers","action","_action$payload","_action$payload$field","errorMessage","wrap","_context","prev","next","setSubmitting","authActions","loginTC","sent","rejected","match","payload","fieldsErrors","length","setFieldError","field","error","stop","_x","_x2","apply","arguments","useLogin","_jsx","Navigate","to","RoutePath","main","Grid","container","justifyContent","children","item","handleSubmit","_jsxs","FormControl","FormLabel","FormGroup","TextField","_objectSpread","label","margin","helperText","touched","errors","getFieldProps","type","FormControlLabel","control","Checkbox","name","checked","onChange","handleChange","Button","disabled","isSubmitting","variant","color"],"sourceRoot":""}